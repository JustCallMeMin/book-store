{
	"info": {
		"_postman_id": "9e8f7c6d-5a4b-3c2d-1e0f-8a7b6c5d4e3f",
		"name": "Book Store API - Automation Flow",
		"description": "Collection to automate testing workflow for Book Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Register New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Registration successful\", function() {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random email for testing",
									"const randomString = Math.random().toString(36).substring(2, 10);",
									"const email = `test.${randomString}@example.com`;",
									"pm.environment.set('testEmail', email);",
									"pm.environment.set('testPassword', 'password123');",
									"",
									"console.log(`Created test user: ${email}`);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Test\",\n    \"last_name\": \"Automation User\",\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"{{testPassword}}\",\n    \"password_confirmation\": \"{{testPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Login successful\", function() {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"});",
									"",
									"// Store the token for subsequent requests",
									"if (jsonData.access_token) {",
									"    pm.environment.set('authToken', jsonData.access_token);",
									"    pm.collectionVariables.set('flowStarted', true);",
									"    console.log('Authentication successful, workflow can continue');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"{{testPassword}}\",\n    \"remember\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Book Management Flow",
			"item": [
				{
					"name": "Search Gutendex Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Can fetch books from Gutendex\", function() {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    ",
									"    if (jsonData.data && jsonData.data.length > 0) {",
									"        // Store a book ID for importing",
									"        const bookId = jsonData.data[0].id;",
									"        pm.environment.set('gutendexBookId', bookId);",
									"        console.log(`Selected Gutendex book ID: ${bookId} for import`);",
									"    } else {",
									"        console.error('No books found in Gutendex response');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/gutendex/books?page=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"gutendex",
								"books"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import Gutendex Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Book import successful\", function() {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('imported');",
									"    ",
									"    if (jsonData.book && jsonData.book.id) {",
									"        pm.environment.set('importedBookId', jsonData.book.id);",
									"        console.log(`Book imported with local ID: ${jsonData.book.id}`);",
									"        pm.collectionVariables.set('gutendexImportComplete', true);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use Pride and Prejudice as fallback if no book ID was found",
									"if (!pm.environment.get('gutendexBookId')) {",
									"    pm.environment.set('gutendexBookId', 1342);",
									"    console.log('Using default book ID: 1342 (Pride and Prejudice)');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"book_id\": {{gutendexBookId}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/gutendex/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"gutendex",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Google Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Google Books search successful\", function() {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('items');",
									"    pm.expect(jsonData.items).to.be.an('array');",
									"    ",
									"    if (jsonData.items && jsonData.items.length > 0) {",
									"        // Store a Google book ID for importing",
									"        const googleBookId = jsonData.items[0].id;",
									"        pm.environment.set('googleBookId', googleBookId);",
									"        console.log(`Selected Google Books ID: ${googleBookId} for import`);",
									"    } else {",
									"        console.error('No books found in Google Books response');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/google-books?q=frankenstein&page=1&per_page=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"google-books"
							],
							"query": [
								{
									"key": "q",
									"value": "frankenstein"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import Google Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Google Book import successful\", function() {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('imported');",
									"    ",
									"    pm.collectionVariables.set('googleImportComplete', true);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use a default Google book ID if none was set",
									"if (!pm.environment.get('googleBookId')) {",
									"    pm.environment.set('googleBookId', 'ydULEQAAQBAJ');",
									"    console.log('Using default Google Book ID: ydULEQAAQBAJ');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/google-books/{{googleBookId}}/import",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"google-books",
								"{{googleBookId}}",
								"import"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Imported Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Can retrieve imported book\", function() {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('author');",
									"    pm.expect(jsonData).to.have.property('price');",
									"    ",
									"    console.log(`Successfully verified imported book: ${jsonData.title}`);",
									"    pm.collectionVariables.set('bookCheckComplete', true);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use the ID of the imported Gutendex book",
									"const bookId = pm.environment.get('importedBookId');",
									"if (!bookId) {",
									"    console.warn('No imported book ID found, test may fail');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/gutendex/books/{{importedBookId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"gutendex",
								"books",
								"{{importedBookId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Delete Imported Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Book deletion successful\", function() {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('deleted');",
									"    ",
									"    console.log('Successfully deleted test book');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/gutendex/books/{{importedBookId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"gutendex",
								"books",
								"{{importedBookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function() {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('logged out');",
									"    ",
									"    // Clean up environment variables",
									"    pm.environment.unset('authToken');",
									"    console.log('Successfully logged out and cleaned up');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "Clean up the test data and log out"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script for automation flow",
					"console.log('Running request: ' + pm.info.requestName);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script for automation flow",
					"console.log('Completed request: ' + pm.info.requestName);",
					"",
					"// Test for consistent API response format",
					"pm.test(\"Response is valid JSON\", function() {",
					"    pm.response.to.be.json;",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "flowStarted",
			"value": "false"
		},
		{
			"key": "gutendexImportComplete",
			"value": "false"
		},
		{
			"key": "googleImportComplete",
			"value": "false"
		},
		{
			"key": "bookCheckComplete",
			"value": "false"
		}
	]
} 