{
	"info": {
		"_postman_id": "9fffadc6-2438-4bb9-8c30-14b7dbf9febc",
		"name": "Book Store API",
		"description": "API Collection for Book Store project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34300204"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random email if not set",
									"if (!pm.environment.get('email')) {",
									"    const randomEmail = 'test' + Date.now() + '@example.com';",
									"    pm.environment.set('email', randomEmail);",
									"    console.log('Generated random email:', randomEmail);",
									"}",
									"",
									"// Set default password if not set",
									"if (!pm.environment.get('password')) {",
									"    pm.environment.set('password', 'Password123!');",
									"    console.log('Set default password');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response",
									"var jsonData = pm.response.json();",
									"",
									"// Test for successful registration",
									"pm.test('Registration successful', function() {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"    ",
									"    if (jsonData.error) {",
									"        console.error('Registration error:', jsonData.error);",
									"    }",
									"    ",
									"    if (jsonData.access_token) {",
									"        pm.environment.set('authToken', jsonData.access_token);",
									"        console.log('Auth token saved from registration');",
									"    }",
									"});",
									"",
									"// Test response structure",
									"pm.test('Response has correct structure', function() {",
									"    if (pm.response.code === 201) {",
									"        pm.expect(jsonData).to.have.property('access_token');",
									"        pm.expect(jsonData).to.have.property('user');",
									"        pm.expect(jsonData.user).to.have.property('email');",
									"    } else if (jsonData.error) {",
									"        pm.expect(jsonData).to.have.property('error');",
									"        pm.expect(jsonData).to.have.property('status');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"password_confirmation\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response body",
									"var jsonData = pm.response.json();",
									"",
									"// Check if response is successful and contains access_token",
									"if (pm.response.code === 200 && jsonData.access_token) {",
									"    // Set the authentication token as environment variable",
									"    pm.environment.set('authToken', jsonData.access_token);",
									"    console.log('Auth token saved to environment variable');",
									"    ",
									"    // Optional: Set the expiration time if returned by the API",
									"    if (jsonData.expires_in) {",
									"        var expiryDate = new Date();",
									"        expiryDate.setSeconds(expiryDate.getSeconds() + jsonData.expires_in);",
									"        pm.environment.set('tokenExpiry', expiryDate.getTime());",
									"    }",
									"    ",
									"    // Automatically fetch activities after login",
									"    setTimeout(function() {",
									"        pm.sendRequest({",
									"            url: pm.environment.get('baseUrl') + '/api/activities?limit=1',",
									"            method: 'GET',",
									"            header: {",
									"                'Accept': 'application/json',",
									"                'Authorization': 'Bearer ' + jsonData.access_token",
									"            }",
									"        }, function(err, res) {",
									"            if (!err && res.code === 200) {",
									"                var activities = res.json();",
									"                if (activities.data && activities.data.length > 0 && activities.data[0].id) {",
									"                    pm.environment.set('activity_id', activities.data[0].id);",
									"                    console.log('Login activity ID saved: ' + activities.data[0].id);",
									"                }",
									"            }",
									"        });",
									"    }, 500);",
									"}",
									"",
									"// Test assertions",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains access token', function() {",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use environment variables in request body",
									"const email = pm.environment.get('email');",
									"const password = pm.environment.get('password');",
									"",
									"if (!email || !password) {",
									"    console.warn('Email or password not set in environment variables. Using defaults.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"remember\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"login"
							]
						},
						"description": "Login to the system and get access token"
					},
					"response": []
				},
				{
					"name": "Login as Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response body",
									"var jsonData = pm.response.json();",
									"",
									"// Check if response is successful and contains access_token",
									"if (pm.response.code === 200 && jsonData.access_token) {",
									"    // Set the authentication token as environment variable",
									"    pm.environment.set('adminToken', jsonData.access_token);",
									"    console.log('Admin token saved to environment variable');",
									"    ",
									"    // Optional: Set the expiration time if returned by the API",
									"    if (jsonData.expires_in) {",
									"        var expiryDate = new Date();",
									"        expiryDate.setSeconds(expiryDate.getSeconds() + jsonData.expires_in);",
									"        pm.environment.set('adminTokenExpiry', expiryDate.getTime());",
									"    }",
									"}",
									"",
									"// Test assertions",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains access token', function() {",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"});",
									"",
									"pm.test('User has Admin role', function() {",
									"    pm.expect(jsonData.user.roles).to.be.an('array');",
									"    const hasAdminRole = jsonData.user.roles.some(role => role.name === 'Admin');",
									"    pm.expect(hasAdminRole).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Admin credentials",
									"pm.environment.set('adminEmail', 'admin@example.com');",
									"pm.environment.set('adminPassword', 'Password123!');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{adminEmail}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"remember\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"login"
							]
						},
						"description": "Login as Admin user to access protected resources"
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/forgot-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"forgot-password"
							]
						},
						"description": "Request password reset link"
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"your-reset-token\",\n    \"email\": \"{{email}}\",\n    \"password\": \"NewPassword123!\",\n    \"password_confirmation\": \"NewPassword123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/reset-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reset-password"
							]
						},
						"description": "Reset password with token received via email"
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Updated\",\n    \"last_name\": \"Name\",\n    \"email\": \"{{email}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/update-profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"update-profile"
							]
						},
						"description": "Update user profile information"
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Logout successful\", function() {",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('logged out');",
									"});",
									"",
									"// Store the old token to fetch activity before clearing it",
									"var oldToken = pm.environment.get('authToken');",
									"",
									"// Automatically fetch the logout activity",
									"if (oldToken) {",
									"    setTimeout(function() {",
									"        pm.sendRequest({",
									"            url: pm.environment.get('baseUrl') + '/api/activities?limit=1',",
									"            method: 'GET',",
									"            header: {",
									"                'Accept': 'application/json',",
									"                'Authorization': 'Bearer ' + oldToken",
									"            }",
									"        }, function(err, res) {",
									"            if (!err && res.code === 200) {",
									"                var activities = res.json();",
									"                if (activities.data && activities.data.length > 0 && activities.data[0].id) {",
									"                    pm.environment.set('activity_id', activities.data[0].id);",
									"                    console.log('Logout activity ID saved: ' + activities.data[0].id);",
									"                }",
									"            } else {",
									"                console.log('Could not fetch activity after logout: Token may be invalid');",
									"            }",
									"            ",
									"            // Clear the token after fetching activity",
									"            pm.environment.unset('authToken');",
									"            console.log('Auth token cleared after logout');",
									"        });",
									"    }, 500);",
									"} else {",
									"    console.log('No auth token found to clear');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"logout"
							]
						},
						"description": "Logout from the system"
					},
					"response": []
				},
				{
					"name": "Admin Logout",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"logout"
							]
						},
						"description": "Logout admin user and invalidate the token"
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"YOUR_REFRESH_TOKEN_HERE\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"refresh"
							]
						},
						"description": "Refresh access token using a refresh token"
					},
					"response": []
				},
				{
					"name": "Refresh Admin Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response body",
									"var jsonData = pm.response.json();",
									"",
									"// Check if response is successful and contains access_token",
									"if (pm.response.code === 200 && jsonData.access_token) {",
									"    // Set the authentication token as environment variable",
									"    pm.environment.set('adminToken', jsonData.access_token);",
									"    console.log('Admin token refreshed and saved to environment variable');",
									"    ",
									"    // Optional: Set the expiration time if returned by the API",
									"    if (jsonData.expires_in) {",
									"        var expiryDate = new Date();",
									"        expiryDate.setSeconds(expiryDate.getSeconds() + jsonData.expires_in);",
									"        pm.environment.set('adminTokenExpiry', expiryDate.getTime());",
									"    }",
									"}",
									"",
									"// Test assertions",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains refreshed access token', function() {",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"refresh"
							]
						},
						"description": "Refresh the admin JWT token when it's about to expire"
					},
					"response": []
				},
				{
					"name": "Change Password",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"current_password\": \"password123\",\n    \"new_password\": \"newpassword456\",\n    \"new_password_confirmation\": \"newpassword456\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/change-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"change-password"
							]
						},
						"description": "Change the authenticated user's password"
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user"
							]
						},
						"description": "Get current authenticated user information"
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"profile"
							]
						},
						"description": "Get the authenticated user profile information"
					},
					"response": []
				}
			],
			"description": "API endpoints for user authentication and account management"
		},
		{
			"name": "Gutendex",
			"item": [
				{
					"name": "Get Authors",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/gutendex/authors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"gutendex",
								"authors"
							]
						},
						"description": "Get list of authors"
					},
					"response": []
				},
				{
					"name": "Get Books by Author",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/gutendex/authors/100/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"gutendex",
								"authors",
								"100",
								"books"
							]
						},
						"description": "Get books by a specific author (ID 100)"
					},
					"response": []
				},
				{
					"name": "Get Categories",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/gutendex/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"gutendex",
								"categories"
							]
						},
						"description": "Get list of categories"
					},
					"response": []
				},
				{
					"name": "Get Books by Category",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/gutendex/categories/100/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"gutendex",
								"categories",
								"100",
								"books"
							]
						},
						"description": "Get books by a specific category (ID 100)"
					},
					"response": []
				},
				{
					"name": "Get Books List with Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains books array\", function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data.books).to.be.an('array');",
									"});",
									"",
									"// Save the first book from search results if available",
									"const jsonData = pm.response.json();",
									"if (jsonData.data && jsonData.data.books && jsonData.data.books.length > 0) {",
									"    var firstBook = jsonData.data.books[0];",
									"    ",
									"    if (firstBook.id) {",
									"        pm.environment.set('book_id', firstBook.id);",
									"        console.log('Book ID saved from search: ' + firstBook.id);",
									"    }",
									"    ",
									"    if (firstBook.title) {",
									"        pm.environment.set('book_title', firstBook.title);",
									"        console.log('Book title saved from search: ' + firstBook.title);",
									"    }",
									"    ",
									"    // Automatically fetch activities after book search",
									"    setTimeout(function() {",
									"        pm.sendRequest({",
									"            url: pm.environment.get('baseUrl') + '/api/activities?limit=1',",
									"            method: 'GET',",
									"            header: {",
									"                'Accept': 'application/json',",
									"                'Authorization': 'Bearer ' + pm.environment.get('authToken')",
									"            }",
									"        }, function(err, res) {",
									"            if (!err && res.code === 200) {",
									"                var activities = res.json();",
									"                if (activities.data && activities.data.length > 0 && activities.data[0].id) {",
									"                    pm.environment.set('activity_id', activities.data[0].id);",
									"                    console.log('Book search activity ID saved: ' + activities.data[0].id);",
									"                }",
									"            }",
									"        });",
									"    }, 500);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/gutendex/books?search=adventure",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"gutendex",
								"books"
							],
							"query": [
								{
									"key": "search",
									"value": "adventure"
								}
							]
						},
						"description": "Search books by title or author"
					},
					"response": []
				},
				{
					"name": "Get Books List with Category Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains filtered books\", function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data.books).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/gutendex/books?category=fiction",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"gutendex",
								"books"
							],
							"query": [
								{
									"key": "category",
									"value": "fiction"
								}
							]
						},
						"description": "Filter books by category name"
					},
					"response": []
				},
				{
					"name": "Get Suggestions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/gutendex/suggestions?q=adventure",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"gutendex",
								"suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "adventure"
								}
							]
						},
						"description": "Search for books, authors, and categories with autocomplete suggestions"
					},
					"response": []
				},
				{
					"name": "Get Books (with filters)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/gutendex/books?search=adventure&category=fiction&author_id=1&language=en&is_featured=true&is_active=true&price_min=10&price_max=50&published_year_min=1900&published_year_max=2023&publisher=Delphi%20Classics&publisher_id=1&sort_by=download_count&sort_direction=desc&per_page=10&page=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"gutendex",
								"books"
							],
							"query": [
								{
									"key": "search",
									"value": "adventure"
								},
								{
									"key": "category",
									"value": "fiction"
								},
								{
									"key": "author_id",
									"value": "1"
								},
								{
									"key": "language",
									"value": "en"
								},
								{
									"key": "is_featured",
									"value": "true"
								},
								{
									"key": "is_active",
									"value": "true"
								},
								{
									"key": "price_min",
									"value": "10"
								},
								{
									"key": "price_max",
									"value": "50"
								},
								{
									"key": "published_year_min",
									"value": "1900"
								},
								{
									"key": "published_year_max",
									"value": "2023"
								},
								{
									"key": "publisher",
									"value": "Delphi%20Classics"
								},
								{
									"key": "publisher_id",
									"value": "1"
								},
								{
									"key": "sort_by",
									"value": "download_count"
								},
								{
									"key": "sort_direction",
									"value": "desc"
								},
								{
									"key": "per_page",
									"value": "10"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						},
						"description": "Get list of books with advanced filtering options"
					},
					"response": []
				},
				{
					"name": "Search Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Search returns results\", function() {",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"});",
									"",
									"// Save the first book from search results if available",
									"if (jsonData.results && jsonData.results.length > 0) {",
									"    var firstBook = jsonData.results[0];",
									"    ",
									"    pm.environment.set('book_id', firstBook.id);",
									"    console.log('Book ID saved from search: ' + firstBook.id);",
									"    ",
									"    if (firstBook.title) {",
									"        pm.environment.set('book_title', firstBook.title);",
									"        console.log('Book title saved from search: ' + firstBook.title);",
									"    }",
									"    ",
									"    // Automatically fetch activities after book search",
									"    setTimeout(function() {",
									"        pm.sendRequest({",
									"            url: pm.environment.get('baseUrl') + '/api/activities?limit=1',",
									"            method: 'GET',",
									"            header: {",
									"                'Accept': 'application/json',",
									"                'Authorization': 'Bearer ' + pm.environment.get('authToken')",
									"            }",
									"        }, function(err, res) {",
									"            if (!err && res.code === 200) {",
									"                var activities = res.json();",
									"                if (activities.data && activities.data.length > 0 && activities.data[0].id) {",
									"                    pm.environment.set('activity_id', activities.data[0].id);",
									"                    console.log('Book search activity ID saved: ' + activities.data[0].id);",
									"                }",
									"            }",
									"        });",
									"    }, 500);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/gutendex/books?search=adventure",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"gutendex",
								"books"
							],
							"query": [
								{
									"key": "search",
									"value": "adventure"
								}
							]
						},
						"description": "Search books by title or author"
					},
					"response": []
				},
				{
					"name": "Get All Publishers",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/publishers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"publishers"
							]
						},
						"description": "Get list of all publishers with book count"
					},
					"response": []
				},
				{
					"name": "Get Publisher Details",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/publishers/{{publisher_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"publishers",
								"{{publisher_id}}"
							]
						},
						"description": "Get details of a specific publisher"
					},
					"response": []
				},
				{
					"name": "Get Books by Publisher",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/publishers/{{publisher_id}}/books?per_page=10&page=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"publishers",
								"{{publisher_id}}",
								"books"
							],
							"query": [
								{
									"key": "per_page",
									"value": "10"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						},
						"description": "Get all books by a specific publisher"
					},
					"response": []
				},
				{
					"name": "Delete Book",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/gutendex/books/1342",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"gutendex",
								"books",
								"1342"
							]
						},
						"description": "Delete a book from the local database"
					},
					"response": []
				},
				{
					"name": "Clear Suggestions Cache (Admin)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/gutendex/suggestions/clear",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"gutendex",
								"suggestions",
								"clear"
							]
						},
						"description": "Clear suggestion cache (admin only)"
					},
					"response": []
				}
			],
			"description": "API endpoints for interacting with Gutendex books"
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Import All Books",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/gutendex/import-all-books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"gutendex",
								"import-all-books"
							]
						},
						"description": "Admin only endpoint to import all books from Gutendex API"
					},
					"response": []
				},
				{
					"name": "Create Publisher",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New Publisher Name\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/publishers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"publishers"
							]
						},
						"description": "Create a new publisher (admin only)"
					},
					"response": []
				},
				{
					"name": "Get All Permissions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/permissions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"permissions"
							]
						},
						"description": "Get all permissions across roles (admin only)"
					},
					"response": []
				},
				{
					"name": "Get Role Permissions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/permissions/roles/{{role_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"permissions",
								"roles",
								"{{role_id}}"
							]
						},
						"description": "Get permissions for a specific role (admin only)"
					},
					"response": []
				},
				{
					"name": "Get User Activities",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/activities?limit=10&page=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"activities"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						},
						"description": "Get paginated list of user activities"
					},
					"response": []
				},
				{
					"name": "Get Specific Activity",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/activities/{{activity_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"activities",
								"{{activity_id}}"
							]
						},
						"description": "Get details of a specific user activity"
					},
					"response": []
				},
				{
					"name": "Update Publisher",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Publisher Name\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/publishers/{{publisher_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"publishers",
								"{{publisher_id}}"
							]
						},
						"description": "Update an existing publisher (admin only)"
					},
					"response": []
				},
				{
					"name": "Clear All Activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Activities cleared successfully\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('cleared');",
									"});",
									"",
									"// Log to console",
									"console.log('All user activities have been cleared');",
									"console.log('Activity ID environment variable is now outdated');",
									"",
									"// Optionally unset the activity_id variable since it's no longer valid",
									"pm.environment.unset('activity_id');",
									"console.log('Activity ID environment variable has been unset');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/activities/clear",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"activities",
								"clear"
							]
						},
						"description": "Clear all activities for the current user"
					},
					"response": []
				},
				{
					"name": "Delete Publisher",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/publishers/{{publisher_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"publishers",
								"{{publisher_id}}"
							]
						},
						"description": "Delete a publisher (admin only, will fail if publisher has books)"
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Add Book to Favorites",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/favorites/{{book_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"favorites",
								"{{book_id}}"
							]
						},
						"description": "Add a book to user favorites"
					},
					"response": []
				},
				{
					"name": "Get All Favorites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has favorites data\", function() {",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"// Save the first favorite book ID if available",
									"if (jsonData.success && jsonData.data && jsonData.data.length > 0) {",
									"    var firstFavorite = jsonData.data[0];",
									"    ",
									"    if (firstFavorite.book_id) {",
									"        pm.environment.set('book_id', firstFavorite.book_id);",
									"        console.log('First favorite book ID saved: ' + firstFavorite.book_id);",
									"    }",
									"    ",
									"    // Automatically fetch activities after viewing favorites",
									"    setTimeout(function() {",
									"        pm.sendRequest({",
									"            url: pm.environment.get('baseUrl') + '/api/activities?limit=1',",
									"            method: 'GET',",
									"            header: {",
									"                'Accept': 'application/json',",
									"                'Authorization': 'Bearer ' + pm.environment.get('authToken')",
									"            }",
									"        }, function(err, res) {",
									"            if (!err && res.code === 200) {",
									"                var activities = res.json();",
									"                if (activities.data && activities.data.length > 0 && activities.data[0].id) {",
									"                    pm.environment.set('activity_id', activities.data[0].id);",
									"                    console.log('View favorites activity ID saved: ' + activities.data[0].id);",
									"                }",
									"            }",
									"        });",
									"    }, 500);",
									"} else {",
									"    console.log('No favorite books found');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/favorites",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"favorites"
							]
						},
						"description": "Get all favorite books for the current user"
					},
					"response": []
				},
				{
					"name": "Check If Book is in Favorites",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/favorites/{{book_id}}/check",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"favorites",
								"{{book_id}}",
								"check"
							]
						},
						"description": "Check if a book is in user favorites"
					},
					"response": []
				},
				{
					"name": "Remove Book from Favorites",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/favorites/{{book_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"favorites",
								"{{book_id}}"
							]
						},
						"description": "Remove a book from user favorites"
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Add to Cart",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"book_id\": 1,\n  \"quantity\": 2\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/cart",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cart"
							]
						},
						"description": "Add a product to the shopping cart."
					},
					"response": []
				},
				{
					"name": "Get Cart",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/cart",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cart"
							]
						},
						"description": "Retrieve the current shopping cart for the user."
					},
					"response": []
				},
				{
					"name": "Update Cart Item",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quantity\": 3\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/cart/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cart",
								"1"
							]
						},
						"description": "Update the quantity of a specific product in the cart."
					},
					"response": []
				},
				{
					"name": "Remove Cart Item",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/cart/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cart",
								"1"
							]
						},
						"description": "Remove a product from the shopping cart."
					},
					"response": []
				}
			],
			"description": "API endpoints for shopping cart operations."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Check if token is about to expire and refresh if needed",
					"const tokenExpiry = pm.environment.get('tokenExpiry');",
					"const currentTime = new Date().getTime();",
					"",
					"// If token will expire in the next 60 seconds, attempt to refresh",
					"if (tokenExpiry && (tokenExpiry - currentTime < 60000)) {",
					"    console.log('Token is about to expire, should refresh');",
					"    // You could trigger a refresh token request here",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global response handling",
					"if (pm.response.code === 401) {",
					"    console.error('Unauthorized: Your token may have expired');",
					"}",
					"",
					"// Save response times for performance monitoring",
					"const responseTime = pm.response.responseTime;",
					"if (responseTime > 1000) {",
					"    console.warn(`Request took ${responseTime}ms to complete`);",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "YOUR_ACCESS_TOKEN_HERE",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "adminEmail",
			"value": "admin@example.com",
			"type": "string"
		},
		{
			"key": "adminPassword",
			"value": "Password123!",
			"type": "string"
		}
	]
}